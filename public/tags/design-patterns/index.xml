<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Patterns on Siete3.com</title>
    <link>http://www.siete3.com/tags/design-patterns/</link>
    <description>Recent content in Design Patterns on Siete3.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 21 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.siete3.com/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing prototype inheritance</title>
      <link>http://www.siete3.com/posts/patterns/testing-protoype-inheritance/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.siete3.com/posts/patterns/testing-protoype-inheritance/</guid>
      <description>https://stackoverflow.com/questions/53406070/using-call-to-inherit-objects-from-a-function
// testing Call to inherit objects / functions // ------------------------------------------- // we declare our first function const funcA = function(firstName) { this.firstName = firstName; this.getFirstName = function() { return &#39;My name is &#39; + this.firstName; }; return this; }; // Create an object out of that function const objA = new funcA(&#39;Rodrigo&#39;); // declare second function const funcB = function (lastName) { this.lastName = lastName; this.getLastName = function() { return &#39;My last name is &#39; + this.</description>
    </item>
    
    <item>
      <title>Mixins</title>
      <link>http://www.siete3.com/posts/patterns/mixins/</link>
      <pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.siete3.com/posts/patterns/mixins/</guid>
      <description>In JavaScript we can only inherit from a single object. There can be only one [[Prototype]] for an object. And a class may extend only one other class.
To solve the use of multi inheritance we use mixins.
In object-oriented programming languages, a Mixin is a class that contains methods for use by other classes without having to be the parent class of those other classes.
A mixin can also be viewed as an interface with implemented methods.</description>
    </item>
    
    <item>
      <title>IIFE - Iimmediatelly Invoked Function Expression</title>
      <link>http://www.siete3.com/posts/patterns/iife/</link>
      <pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.siete3.com/posts/patterns/iife/</guid>
      <description>IIFE - Iimmediatelly Invoked Function Expression var foo = &amp;quot;foo1&amp;quot;; (function() { var foo = &amp;quot;foo2&amp;quot;; console.log(foo); // foo2 })(); console.log(foo); // foo1 // we can also write the above statement like: (function() { // code }());  We use IIFE in order to not pollute the global scope.
Bibliography: Ben Alman: Immediately-Invoked Function Expression (IIFE)</description>
    </item>
    
  </channel>
</rss>
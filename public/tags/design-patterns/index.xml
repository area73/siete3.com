<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design Patterns on Siete3.com -- Hugo Minimal</title>
    <link>http://www.siete3.com/tags/design-patterns/</link>
    <description>Recent content in Design Patterns on Siete3.com -- Hugo Minimal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Sun, 14 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.siete3.com/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IIFE - Iimmediatelly Invoked Function Expression</title>
      <link>http://www.siete3.com/posts/patterns/iife/</link>
      <pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.siete3.com/posts/patterns/iife/</guid>
      <description>IIFE - Iimmediatelly Invoked Function Expression var foo = &amp;quot;foo1&amp;quot;; (function() { var foo = &amp;quot;foo2&amp;quot;; console.log(foo); // foo2 })(); console.log(foo); // foo1 // we can also write the above statement like: (function() { // code }());  We use IIFE in order to not pollute the global scope.
Bibliography: Ben Alman: Immediately-Invoked Function Expression (IIFE)</description>
    </item>
    
    <item>
      <title>functional programming</title>
      <link>http://www.siete3.com/posts/functional-programming/</link>
      <pubDate>Fri, 12 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.siete3.com/posts/functional-programming/</guid>
      <description>functional programming In computer science, functional programming is a programming paradigm — a style of building the structure and elements of computer programs— that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.
It is a declarative programming paradigm, which means programming is done with expressions or declarations instead of statements. To put it in a diferent way we can say that declarative programming cares about what to perform an action and imperative cares about how to perform that action</description>
    </item>
    
    <item>
      <title>Method chaining in Javascript</title>
      <link>http://www.siete3.com/posts/method-chaining-in-javascript/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.siete3.com/posts/method-chaining-in-javascript/</guid>
      <description>Method chaining in Javascript from wikipedia Method chaining, also known as named parameter idiom, is a common syntax for invoking multiple method calls in object-oriented programming languages.
The key to achieve this is that each method returns an object, allowing the calls to be chained together in a single statement without requiring variables to store the intermediate results.
A similar syntax is method cascading, where after the method call the expression evaluates to the current object, not the return value of the method.</description>
    </item>
    
  </channel>
</rss>
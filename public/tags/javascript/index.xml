<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Siete3.com</title>
    <link>http://www.siete3.com/tags/javascript/</link>
    <description>Recent content in Javascript on Siete3.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 14 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.siete3.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Global variables are bad</title>
      <link>http://www.siete3.com/posts/global-variables-are-bad/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.siete3.com/posts/global-variables-are-bad/</guid>
      <description>Extracted from a Gist, a very nice explanation // It is important to declare your variables. (function() { var foo = &#39;Hello, world!&#39;; print(foo); //=&amp;gt; Hello, world! })(); print(foo); // No way Jos√© !! // Because if you don&#39;t, the become global variables. (function() { foo = &#39;Hello, world!&#39;; print(foo) //=&amp;gt; Hello, world! })(); print(foo) //=&amp;gt; WTF, it returns &amp;quot;Hello, world!&amp;quot; // When global variables sneak into your code they can cause problems.</description>
    </item>
    
    <item>
      <title>Lexical and Dynamic scope</title>
      <link>http://www.siete3.com/posts/lexical-and-dynamic-scope/</link>
      <pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.siete3.com/posts/lexical-and-dynamic-scope/</guid>
      <description>Lexical scoping Evil eval We can cheat on lexical scoping using eval keywod. The eval keyword, takes any given strings and it treats as it was a code
var bar = &amp;quot;foo&amp;quot;; function foo(str) { eval(str); console.log(&amp;quot;bar&amp;quot;); // 42 !!!!! } foo(&amp;quot;var bar = 42&amp;quot;);  The problem of doing this is that performance will be afected because as we know JS first assign the LHS (left hand side), witch means that it will read all the assigments on the left and lator will do the right hand side of the code.</description>
    </item>
    
  </channel>
</rss>